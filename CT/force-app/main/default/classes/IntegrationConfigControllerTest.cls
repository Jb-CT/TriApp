@isTest
private class IntegrationConfigControllerTest {
    
    @isTest
    static void testGetConfigurations() {
        // Create test data
        CleverTap_Config__c testConfig = new CleverTap_Config__c(
            Name = 'Test Config',
            Region__c = 'US',
            CleverTap_Account_ID__c = 'test-account-id',
            CleverTap_Passcode__c = 'test-passcode',
            CleverTap_API_URL__c = 'https://us1.api.clevertap.com/1/upload'
        );
        insert testConfig;
        
        // Test
        Test.startTest();
        List<CleverTap_Config__c> configs = IntegrationConfigController.getConfigurations();
        Test.stopTest();
        
        // Verify
        System.assertEquals(1, configs.size(), 'Should return one configuration');
        System.assertEquals('Test Config', configs[0].Name, 'Name should match');
    }
    
    @isTest
    static void testSaveConfiguration() {
        // Setup
        Map<String, Object> config = new Map<String, Object>{
            'name' => 'Test Connection',
            'region' => 'US',
            'accountId' => 'test-account-id',
            'passcode' => 'test-passcode'
        };
        
        // Test
        Test.startTest();
        String result = IntegrationConfigController.saveConfiguration(config);
        Test.stopTest();
        
        // Verify
        System.assertEquals('Success', result, 'Save operation should return Success');
        List<CleverTap_Config__c> savedConfigs = [SELECT Id FROM CleverTap_Config__c WHERE Name = 'Test Connection'];
        System.assertEquals(1, savedConfigs.size(), 'One record should be created');
    }
    
    @isTest
    static void testUpdateConfiguration() {
        // Setup
        CleverTap_Config__c testConfig = new CleverTap_Config__c(
            Name = 'Test Config',
            Region__c = 'US',
            CleverTap_Account_ID__c = 'test-account-id',
            CleverTap_Passcode__c = 'test-passcode',
            CleverTap_API_URL__c = 'https://us1.api.clevertap.com/1/upload'
        );
        insert testConfig;
        
        Map<String, Object> updatedConfig = new Map<String, Object>{
            'id' => testConfig.Id,
            'name' => 'Updated Config',
            'region' => 'EU',
            'accountId' => 'updated-account-id',
            'passcode' => 'updated-passcode'
        };
        
        // Test
        Test.startTest();
        String result = IntegrationConfigController.saveConfiguration(updatedConfig);
        Test.stopTest();
        
        // Verify
        System.assertEquals('Success', result, 'Update operation should return Success');
        CleverTap_Config__c updated = [SELECT Name, Region__c FROM CleverTap_Config__c WHERE Id = :testConfig.Id];
        System.assertEquals('Updated Config', updated.Name, 'Name should be updated');
        System.assertEquals('EU', updated.Region__c, 'Region should be updated');
    }
    
    @isTest
    static void testDeleteConfiguration() {
        // Setup
        CleverTap_Config__c testConfig = new CleverTap_Config__c(
            Name = 'Test Config',
            Region__c = 'US',
            CleverTap_Account_ID__c = 'test-account-id',
            CleverTap_Passcode__c = 'test-passcode',
            CleverTap_API_URL__c = 'https://us1.api.clevertap.com/1/upload'
        );
        insert testConfig;
        
        // Test
        Test.startTest();
        String result = IntegrationConfigController.deleteConfiguration(testConfig.Id);
        Test.stopTest();
        
        // Verify
        System.assertEquals('Success', result, 'Delete operation should return Success');
        CleverTap_Config__c deleted = [SELECT Name FROM CleverTap_Config__c WHERE Id = :testConfig.Id];
        System.assert(deleted.Name.startsWith('[DELETED]'), 'Name should be prefixed with [DELETED]');
    }
}